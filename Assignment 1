//Due:  11:59pm, Tuesday, Sept. 14
#include <iostream>
using namespace std;

class Node {
public:
	int value;
	Node* next;
	Node* previous;
	Node(int i) { value = i; next = previous = nullptr; }
	Node() { next = previous = nullptr; }//default constructor
};

class DoublyLinkedList {
public:
	Node* head;
	Node* tail;
	DoublyLinkedList() { head = tail = nullptr; }
	void makeList(int n, int m);//create an n-node linked list with random values in 0 ... m-1
	void print_F();
	void print_B();
	void bubbleSort();
	//2 3 1 6 8 5 9 6 2 5 7 7 4 2 becomes
	//1 2 2 2 3 4 5 5 6 6 7 7 8 9 

	//In case multiple nodes have the same min value, the
	//first of them will be swapped with the node pointed by head.
	//In case multiple nodes have the same max value, the
	//last of them will be swapped with the node pointed by tail.
	//For example,    6 5 3 7 3 7 5 4 will become 3 5 6 7 3 4 5 7





	//You only can modify next and previous of nodes, but not value of nodes.
	//You are required to directly work on the linked list.

	//You are not allowed to use any external structures such as arrays
	// to perform operations and copy the results back to the linked list.

	//You are not allowed to create additional functions.
	//You can use while loop, but not for loop.



	void minMax();//swap the node of min value with the first node; 
	//swap the node of max value with the last node

	// 14 5 6 2 17 9 8
	// 2 5 6 14 8 9 17

	//In case multiple nodes have the same min value, the
	//first of them will be swapped with the node pointed by head.
	//In case multiple nodes have the same max value, the
	//last of them will be swapped with the node pointed by tail.
	//For example,    6 5 3 7 3 7 5 4 will become 3 5 6 7 3 4 5 7

	//Similar constraints apply as repeatedly stated below.
	//You only can modify next and previous of nodes, but not value of nodes.
	//You are required to directly work on the linked list.

	//You are not allowed to use any external structures such as arrays
	// to perform operations and copy the results back to the linked list.

	//You are not allowed to create additional functions.
	//You can use while loop, but not for loop.


};

void DoublyLinkedList::minMax() {

	//Your code

}

void DoublyLinkedList::bubbleSort() {

	//Your code

}


void DoublyLinkedList::makeList(int n, int m) {
	for (int i = 0; i < n; ++i) {
		Node* p1{ new Node{rand() % m} };
		if (!head) { head = tail = p1; }//currently empty linked list
		else {
			tail->next = p1;
			p1->previous = tail;
			tail = p1;
		}
	}
}
void DoublyLinkedList::print_F() {
	Node* p1{ head };
	while (p1) {
		cout << p1->value << " ";
		p1 = p1->next;
	}
	cout << endl;
}
void DoublyLinkedList::print_B() {
	Node* p1{ tail };
	while (p1) {
		cout << p1->value << " ";
		p1 = p1->previous;
	}
	cout << endl;
}

int main() {
	DoublyLinkedList L1;
	L1.makeList(19, 15);
	L1.print_F();
	L1.print_B();
	L1.minMax();
	L1.print_F();
	L1.print_B();

	DoublyLinkedList L2;
	L2.makeList(25, 30);
	L2.bubbleSort();
	L2.print_F();
	L2.print_B();
	return 0;
}